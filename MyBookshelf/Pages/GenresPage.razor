@page "/genrespage"

@using MyBookshelf.Data

@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits OwningComponentBase<BookshelfService>

<h2>Genres</h2>

<AuthorizeView>

    <!-- Show this section if the user is logged in -->

    <Authorized>
        @if (genres == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }

        else
        {
            <!-- Show the genres for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Genre</th>
                        <th></th>
                    </tr>
                </thead>

                <tbody>

                    @foreach (var genre in genres)
                    {
                        <tr>
                            <td>@genre.Id</td>
                            <td>@genre.Name</td>
                            
                            <td>
                                <!-- Edit the current genre -->
                                <button class="btn btn-primary"
                                        @onclick="(() => EditGenre(genre))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <p>
                <!-- Add a new genre -->
                <button class="btn btn-primary"
                        @onclick="AddNewGenre">
                    Add New genre
                </button>
            </p>
            @if (ShowPopup)

            {
                <!-- This is the popup to create or edit a genre -->

                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit genre</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>

                            <!-- Edit form for the current genre -->
                            <div class="modal-body">

                                <input class="form-control" type="text"
                                       placeholder="genre"
                                       @bind="objGenre.Name" />
                                
                                <!-- Button to save the genre -->

                                <button class="btn btn-primary"
                                        @onclick="SaveGenre">
                                    Save
                                </button>



                                <!-- Only show delete button if not a new record -->

                                @if (objGenre.Id > 0)
                                {
                                    <!-- Button to delete the genre -->
                                    <button class="btn btn-primary"
                                            @onclick="DeleteGenre">
                                        Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>

            }
        }

    </Authorized>

    <!-- Show this section if the user is not logged in -->

    <NotAuthorized>

        <p>You're not signed in.</p>

    </NotAuthorized>

</AuthorizeView>

@code {



    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<Genre> genres;

    protected override async Task OnInitializedAsync()
    {
        genres = await @Service.GetGenresAsync();
    }

    Genre objGenre = new Genre();
    bool ShowPopup = false;

    void ClosePopup()
    {
        ShowPopup = false;
    }

    void AddNewGenre()
    {
        // Make new genre
        objGenre = new Genre();

        // Set Id to 0 so we know it is a new record
        objGenre.Id = 0;

        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveGenre()
    {
        // Close the Popup
        ShowPopup = false;

        // Get the current user
        var user = (await authenticationStateTask).User;

        // A new genre will have the Id set to 0
        if (objGenre.Id == 0)
        {
            // Create new read genre
            Genre objNewGenre = new Genre();
            objNewGenre.Name = objGenre.Name;
           
            // Save the result
            var result = @Service.CreateGenreAsync(objNewGenre);

        }

        else
        {
            // This is an update
            var result = @Service.UpdateGenreAsync(objGenre);
        }

        // Get the genres for the current user
        genres = await @Service.GetGenresAsync();

    }

    

    void EditGenre(Genre genre)

    {

        // Set the selected genre as the current genre
        objGenre = genre;

        // Open the Popup
        ShowPopup = true;

    }

    async Task DeleteGenre()

    {
        // Close the Popup
        ShowPopup = false;

        // Get the current user
        var user = (await authenticationStateTask).User;

        // Delete the genre
        var result = @Service.DeleteGenreAsync(objGenre);

        // Get the genres for the current user
        genres = await @Service.GetGenresAsync();

    }
}